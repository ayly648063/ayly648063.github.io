<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ayly648063.github.io</id>
    <title>编码笔记</title>
    <updated>2021-02-18T11:55:52.527Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ayly648063.github.io"/>
    <link rel="self" href="https://ayly648063.github.io/atom.xml"/>
    <subtitle>个人博客</subtitle>
    <logo>https://ayly648063.github.io/images/avatar.png</logo>
    <icon>https://ayly648063.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 编码笔记</rights>
    <entry>
        <title type="html"><![CDATA[webpack标准配置]]></title>
        <id>https://ayly648063.github.io/post/webpack-biao-zhun-pei-zhi/</id>
        <link href="https://ayly648063.github.io/post/webpack-biao-zhun-pei-zhi/">
        </link>
        <updated>2021-01-10T11:26:19.000Z</updated>
        <summary type="html"><![CDATA[<p>npm init -y  #初始化一个package.json<br>
npm install webpack webpack-cli -D    #本地安装最新版<br>
npm info webpack   #查看webpack历史版本信息（当要安装特定版本时）</p>
<figure data-type="image" tabindex="1"><img src="https://ayly648063.github.io/post-images/1613648048275.png" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<p>npm init -y  #初始化一个package.json<br>
npm install webpack webpack-cli -D    #本地安装最新版<br>
npm info webpack   #查看webpack历史版本信息（当要安装特定版本时）</p>
<figure data-type="image" tabindex="1"><img src="https://ayly648063.github.io/post-images/1613648048275.png" alt="" loading="lazy"></figure>
<!-- more -->
<p><strong>webpack.config.js配置</strong></p>
<!-- more -->
<p>const path = require('path');<br>
const HtmlWebpackPlugin = require('html-webpack-plugin');//自动生成html模板，以便在多个入口文件时，不用手动修改引入的js<br>
const glob = require('glob-all')<br>
const MiniCssExtractPlugin = require('mini-css-extract-plugin')<br>
const PurgecssPlugin = require('purgecss-webpack-plugin')</p>
<p>module.exports = {<br>
entry: './src/js/index.js',<br>
plugins: [//配置html-webpack-plugin<br>
new HtmlWebpackPlugin({<br>
title: 'Output Management'<br>
}),<br>
new MiniCssExtractPlugin({<br>
filename: 'dist/[name].[chunkhash:8].css',<br>
}),<br>
new PurgecssPlugin({<br>
paths: glob.sync([<br>
path.join(__dirname, './index.html'),<br>
path.join(__dirname, './src/js/index.js')<br>
// path.join(__dirname, './src/*.ts'),<br>
],{<br>
nodir: true<br>
})<br>
})<br>
],<br>
output: {<br>
publicPath:'./',<br>
filename: 'bundle.js',//打包后文件的名字<br>
path: path.resolve(__dirname, 'dist'),//打包后文件的输出目录<br>
},<br>
module: {<br>
rules: [<br>
{//打包css文件(可以用import在js中引入css文件)<br>
test: /.css<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 172: … ]
            }̲,
            {…'>/,
                use: [MiniCssExtractPlugin.loader,
                    // &#039;style-loader&#039;,//css压缩
                    &#039;css-loader&#039;//去除多余css
               ]
            },
            {//加载图片(js或css中引入图片时)
                test: /\.(png|svg|jpg|gif)</span>/,<br>
use: [<br>
{<br>
loader: 'file-loader',<br>
options:{<br>
name: '[path][name].[ext]',//配置自定义文件模板<br>
outputPath: '.',//配置打包后的输出目录(.代表在dist目录中生成)<br>
}<br>
}<br>
]<br>
},<br>
{//加载字体<br>
test: /.(woff|woff2|eot|ttf|otf)<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 383: … ]
            }̲,
            {…'>/,
                use: [
                    // &#039;file-loader&#039;
                    {
                        loader:&#039;file-loader&#039;,
                        options:{
                            name: &#039;[path][name].[ext]&#039;,//配置自定义文件模板
                            outputPath: &#039;.&#039;,//配置打包后的输出目录(.代表在dist目录中生成)
                        }
                    }
                ]
            },
            {//加载数据之csv与tsv
                test: /\.(csv|tsv)</span>/,<br>
use: [<br>
'csv-loader'<br>
]<br>
},<br>
{//加载数据之xml   json不用配置就可以直接加载<br>
test: /.xml$/,<br>
use: [<br>
'xml-loader'<br>
]<br>
}<br>
]<br>
}<br>
};</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://ayly648063.github.io/post/hello-gridea/</id>
        <link href="https://ayly648063.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>